apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "defra-cde.fullname" . }}-{{ .Values.release }}
  labels:
    app: {{ template "defra-cde.fullname" . }}-{{ .Values.release }}
    chart: {{ template "defra-cde.chart" . }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
  {{- with .Values.labels }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.annotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
data:
  default.vcl: |
    vcl 4.0;

    # this points at the tomcat api:
    backend default {
        .host = "{{ include "defra-cde.fullname" . }}-app-{{ .Values.release }}";
        .port = "3000";
    }

    sub vcl_recv {
        # Happens before we check if we have this in cache already.
        #
        # Typically you clean up the request here, removing cookies you don't need,
        # rewriting the request, etc.

        # dont cache pingdom checks
        if ( req.http.User-Agent ~ "Pingdom" ) {
          return (pass);
        }

        # dont cache health checks
        if ( req.http.User-Agent ~ "GoogleHC" ) {
          return (pass);
        }

        if (req.url ~ "^/catchment-planning/search") {
          return (pass);
        }

        # don't cache static zips, geojson
        if (req.url ~ "^/catchment-planning/(.*)\.(csv|zip|geojson|xlsx)$") {
          return (pass);
        }

        set req.backend_hint = default;

        #Â get rid of the cookies and auth as this stops it caching.
        unset req.http.Cookie;
        unset req.http.Authorization;
    }

    sub vcl_backend_response {
        # Happens after we have read the response headers from the backend.
        #
        # Here you clean the response headers, removing silly Set-Cookie headers
        # and other mistakes your backend does.

        # Serve pages from the cache should we get a sudden error and re-check in one sec
        if (beresp.status >= 500) {
          set beresp.grace = 1s;
          set beresp.ttl = 1s;
        } else {
          #otherwise cache for 10d, with a 6h grace.
          set beresp.grace = 6h;
          set beresp.ttl = 10d;
        }

        return (deliver);
    }

    sub vcl_deliver {
        # Happens when we have all the pieces we need, and are about to send the
        # response to the client.
        #
        # You can do accounting or modifying the final object here.

        # useful for debugging:
        if (obj.hits > 0) {
          set resp.http.X-Varnish-Cache = "HIT";
        }
        else {
          set resp.http.X-Varnish-Cache = "MISS";
        }
    }