apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "defra-wims.fullname" . }}
  labels:
    app: {{ template "defra-wims.fullname" . }}
    chart: {{ template "defra-wims.chart" . }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
  {{- with .Values.labels }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.annotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
data:
  app.conf: |
    # app configuration

    # Plugin extension for velocity library
    apix                 = com.epimorphics.simpleAPI.webapi.LibAPI

    # Velocity engine
    velocity             = com.epimorphics.appbase.templates.VelocityRender
    velocity.templates   = {webapp}/WEB-INF/templates
    #velocity.templates   = /opt/epr/templates
    velocity.root        = /ui
    velocity.production  = false
    velocity.plugin      = $apix

    # Real data source
    ssource              = com.epimorphics.appbase.data.impl.RemoteSparqlSource
    ssource.endpoint     = http://{{ include "defra-wims.fullname" . }}-db:3030/ds/query

    dsource              = com.epimorphics.simpleAPI.query.impl.SparqlDataSource
    dsource.source       = $ssource

    # Set up default prefixes
    prefixes             = com.epimorphics.appbase.core.PrefixService
    prefixes.prefixFile  = {webapp}/WEB-INF/prefixes.ttl

    # handle transform setup
    # spatial = com.epimorphics.sparql.geo.GeoTransformByJenaSpatial
    spatial = com.epimorphics.sparql.geo.GeoTransformBySparqlFilter
    apptransforms         = com.epimorphics.simpleAPI.queryTransforms.AppTransforms
    apptransforms.include = $spatial

    # Request processors to support generic geo and start queries
    geoProc    = com.epimorphics.simpleAPI.requests.GeoRequestProcessor

    searchProc = com.epimorphics.simpleAPI.requests.SearchRequestProcessor
    searchProc.filterDistinct = true

    # Cache manager for batch results
    cache                = com.epimorphics.armlib.impl.FileCacheManager
    cache.cacheDir       = /opt/cache/live
    cache.urlPrefix      = /water-quality/batch/result-download/
    cache.defaultSuffix  = csv
    cache.compressed     = false

    # Queue manager for batch preparation
    queue                = com.epimorphics.armlib.impl.MemQueueManager
    # queue                = com.epimorphics.armlib.impl.DynQueueManager
    # queue.tablePrefix    = {{ .Values.api.appConfig.queue.tablePrefix }}
    # queue.checkInterval  = 1500

    # Batch Data source
    bssource              = com.epimorphics.appbase.data.impl.RemoteSparqlSource
    bssource.endpoint     = http://{{ include "defra-wims.fullname" . }}-db:3030/ds/query
    bssource.connectTimeout = 10000
    bssource.remoteTimeout = 36000000

    batchSource              = com.epimorphics.simpleAPI.query.impl.SparqlDataSource
    batchSource.source       = $bssource

    # Batch request manager
    reqm                 = com.epimorphics.armlib.impl.StandardRequestManager
    reqm.cacheManager    = $cache
    reqm.queueManager    = $queue

    # Batch processor
    batch                = com.epimorphics.wims.batch.BatchProcessor
    batch.requestManager = $reqm
    batch.source         = $batchSource

    # Additional config
    config               = com.epimorphics.appbase.core.GenericConfig
    config.lastDate = 2015
    config.firstDate = 2005
    config.gtagUACode = {{ .Values.googleAnalyticsId }}

    # Set the API key for the OS maps API here
    config.osMapsAPIKey = {{ .Values.osMapsAPIKey }}

    # API configuration
    api                  = com.epimorphics.simpleAPI.core.API
    api.source           = $dsource
    api.baseURI          = http://environment.data.gov.uk/water-quality/
    api.documentation    = http://environment.data.gov.uk/water-quality/TBD
    api.publisher        = Environment Agency
    api.licence          = http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/
    api.contextURL       = http://environment.data.gov.uk/water-quality/doc/context-TBD.jsonld
    api.comment          = WARNING: Pre-alpha test service
    api.endpointSpecDir  = {webapp}/WEB-INF/endpointSpecs
    api.maxAge           = 86400
    api.showLangTag      = false
    api.fullPathsInCSVHeaders = true
    api.requestProcessors = $geoProc, $searchProc
    api.defaultItemTemplate = genericItem.vm
    api.defaultListTemplate = genericList.vm
    api.htmlNonDefault      = true
    api.configExtensions = $config
  processor-app.conf: |
    # app configuration

    # Plugin extension for velocity library
    apix                 = com.epimorphics.simpleAPI.webapi.LibAPI

    # Velocity engine
    velocity             = com.epimorphics.appbase.templates.VelocityRender
    velocity.templates   = {webapp}/WEB-INF/templates
    #velocity.templates   = /opt/epr/templates
    velocity.root        = /ui
    velocity.production  = false
    velocity.plugin      = $apix

    # Real data source
    ssource              = com.epimorphics.appbase.data.impl.RemoteSparqlSource
    ssource.endpoint     = http://localhost:3030/ds/query

    dsource              = com.epimorphics.simpleAPI.query.impl.SparqlDataSource
    dsource.source       = $ssource

    # Set up default prefixes
    prefixes             = com.epimorphics.appbase.core.PrefixService
    prefixes.prefixFile  = {webapp}/WEB-INF/prefixes.ttl

    # handle transform setup
    # spatial = com.epimorphics.sparql.geo.GeoTransformByJenaSpatial
    spatial = com.epimorphics.sparql.geo.GeoTransformBySparqlFilter
    apptransforms         = com.epimorphics.simpleAPI.queryTransforms.AppTransforms
    apptransforms.include = $spatial

    # Request processors to support generic geo and start queries
    geoProc    = com.epimorphics.simpleAPI.requests.GeoRequestProcessor

    searchProc = com.epimorphics.simpleAPI.requests.SearchRequestProcessor
    searchProc.filterDistinct = true

    # Cache manager for batch results
    cache                = com.epimorphics.armlib.impl.FileCacheManager
    cache.cacheDir       = /opt/cache/non-live
    cache.urlPrefix      = /water-quality/batch/result-download/
    cache.defaultSuffix  = csv
    cache.compressed     = false

    # Queue manager for batch preparation
    queue                = com.epimorphics.armlib.impl.MemQueueManager
    # queue                = com.epimorphics.armlib.impl.DynQueueManager
    # queue.tablePrefix    = {{ .Values.processor.apiConfig.queue.tablePrefix }}
    # queue.checkInterval  = 1500

    # Batch Data source
    bssource              = com.epimorphics.appbase.data.impl.RemoteSparqlSource
    bssource.endpoint     = http://localhost:3030/ds/query
    bssource.connectTimeout = 10000
    bssource.remoteTimeout = 36000000

    batchSource              = com.epimorphics.simpleAPI.query.impl.SparqlDataSource
    batchSource.source       = $bssource

    # Batch request manager
    reqm                 = com.epimorphics.armlib.impl.StandardRequestManager
    reqm.cacheManager    = $cache
    reqm.queueManager    = $queue

    # Batch processor
    batch                = com.epimorphics.wims.batch.BatchProcessor
    batch.requestManager = $reqm
    batch.source         = $batchSource

    # Additional config
    config               = com.epimorphics.appbase.core.GenericConfig
    config.lastDate = 2015
    config.firstDate = 2005
    config.gtagUACode = {{ .Values.googleAnalyticsId }}

    # Set the API key for the OS maps API here
    config.osMapsAPIKey = {{ .Values.osMapsAPIKey }}

    # API configuration
    api                  = com.epimorphics.simpleAPI.core.API
    api.source           = $dsource
    api.baseURI          = http://environment.data.gov.uk/water-quality/
    api.documentation    = http://environment.data.gov.uk/water-quality/TBD
    api.publisher        = Environment Agency
    api.licence          = http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/
    api.contextURL       = http://environment.data.gov.uk/water-quality/doc/context-TBD.jsonld
    api.comment          = WARNING: Pre-alpha test service
    api.endpointSpecDir  = {webapp}/WEB-INF/endpointSpecs
    api.maxAge           = 86400
    api.showLangTag      = false
    api.fullPathsInCSVHeaders = true
    api.requestProcessors = $geoProc, $searchProc
    api.defaultItemTemplate = genericItem.vm
    api.defaultListTemplate = genericList.vm
    api.htmlNonDefault      = true
    api.configExtensions = $config
  default.vcl: |
    vcl 4.0;

    # this points at the tomcat api:
    backend default {
        .host = "{{ include "defra-wims.fullname" . }}-api";
        .port = "8080";
        .first_byte_timeout = 120s;
        .between_bytes_timeout = 120s;
        .connect_timeout = 120s;
    }

    sub vcl_recv {
        # Happens before we check if we have this in cache already.
        #
        # Typically you clean up the request here, removing cookies you don't need,
        # rewriting the request, etc.

        # get rid of the cookies and auth as this stops it caching.
        unset req.http.Cookie;
        unset req.http.Authorization;
    }

    sub vcl_backend_response {
        # Happens after we have read the response headers from the backend.
        #
        # Here you clean the response headers, removing silly Set-Cookie headers
        # and other mistakes your backend does.
    }

    sub vcl_deliver {
        # Happens when we have all the pieces we need, and are about to send the
        # response to the client.
        #
        # You can do accounting or modifying the final object here.

        # useful for debugging:
        if (obj.hits > 0) {
          set resp.http.X-Varnish-Cache = "HIT";
        }
        else {
          set resp.http.X-Varnish-Cache = "MISS";
        }
    }